<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sinonc.agriculture.mapper.MemberNoticeMapper">
    <resultMap id="BaseResultMap" type="com.sinonc.agriculture.domain.MemberNotice">
        <id column="notice_id" jdbcType="BIGINT" property="noticeId"/>
        <result column="member_id" jdbcType="BIGINT" property="memberId"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="read_flag" jdbcType="INTEGER" property="readFlag"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="del_flg" jdbcType="INTEGER" property="delFlg"/>
        <result column="notice_content" jdbcType="VARCHAR" property="noticeContent"/>
    </resultMap>
    <sql id="Base_Column_List">
    notice_id, member_id, `type`, read_flag, create_time, update_time, del_flg, notice_content
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from member_notice
        where notice_id = #{noticeId,jdbcType=BIGINT}
    </select>
    <select id="selectNoticeList" parameterType="com.sinonc.agriculture.domain.MemberNotice" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from member_notice
        <where>
            <if test="memberId != null">
                and member_id = #{memberId}
            </if>
            <if test="type != null">
                and `type` = #{type}
            </if>
            <if test="readFlag != null">
                and read_flag = #{readFlag}
            </if>
            <if test="delFlg != null">
                and del_flg = #{delFlag}
            </if>
        </where>
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from member_notice
    where notice_id = #{noticeId,jdbcType=BIGINT}
  </delete>
    <insert id="insert" keyColumn="notice_id" keyProperty="noticeId"
            parameterType="com.sinonc.agriculture.domain.MemberNotice" useGeneratedKeys="true">
    insert into member_notice (member_id, `type`, read_flag, 
      create_time, update_time, del_flg, 
      notice_content)
    values (#{memberId,jdbcType=BIGINT}, #{type,jdbcType=INTEGER}, #{readFlag,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{delFlg,jdbcType=INTEGER}, 
      #{noticeContent,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" keyColumn="notice_id" keyProperty="noticeId"
            parameterType="com.sinonc.agriculture.domain.MemberNotice" useGeneratedKeys="true">
        insert into member_notice
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="memberId != null">
                member_id,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="readFlag != null">
                read_flag,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="delFlg != null">
                del_flg,
            </if>
            <if test="noticeContent != null">
                notice_content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="memberId != null">
                #{memberId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="readFlag != null">
                #{readFlag,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="delFlg != null">
                #{delFlg,jdbcType=INTEGER},
            </if>
            <if test="noticeContent != null">
                #{noticeContent,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <insert id="batchInsert" keyColumn="notice_id" keyProperty="noticeId"
            parameterType="com.sinonc.agriculture.domain.MemberNotice" useGeneratedKeys="true">
        insert into member_notice(member_id, `type`, create_time, update_time, notice_content)
        <foreach collection="list" item="item" separator="," open=" values ">
            (
            #{item.memberId,jdbcType=BIGINT}, #{item.type,jdbcType=INTEGER},
            #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP},
            #{item.noticeContent,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.sinonc.agriculture.domain.MemberNotice">
        update member_notice
        <set>
            <if test="memberId != null">
                member_id = #{memberId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=INTEGER},
            </if>
            <if test="readFlag != null">
                read_flag = #{readFlag,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="delFlg != null">
                del_flg = #{delFlg,jdbcType=INTEGER},
            </if>
            <if test="noticeContent != null">
                notice_content = #{noticeContent,jdbcType=VARCHAR},
            </if>
        </set>
        where notice_id = #{noticeId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.sinonc.agriculture.domain.MemberNotice">
    update member_notice
    set member_id = #{memberId,jdbcType=BIGINT},
      `type` = #{type,jdbcType=INTEGER},
      read_flag = #{readFlag,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flg = #{delFlg,jdbcType=INTEGER},
      notice_content = #{noticeContent,jdbcType=VARCHAR}
    where notice_id = #{noticeId,jdbcType=BIGINT}
  </update>
</mapper>